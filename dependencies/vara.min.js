Vara = function (t, e, s, i) { var r = this; this.elementName = t, this.textsInit = [], "string" == typeof s ? this.textsInit.push({ text: s }) : "object" == typeof s && (this.textsInit = s), this.texts = this.textsInit, this.properties = i || {}, this.properties.textAlign = this.properties.textAlign || "left", this.letterSpacing = 0, this.element = document.querySelector(this.elementName), this.fontSource = e, this.characters = {}, this.drawnCharacters = {}, this.totalPathLength = 0, this.fontSize = 24, this.frameRate = 1e3 / 30, this.prevDuration = 0, this.completed = !1, this.ready = function (t) { r.readyF = t }, this.animationEnd = function (t) { r.animationEndF = t }, this.svg = this.createNode("svg", { width: "100%" }), this.element.appendChild(this.svg), this.font = document.createElement("object"), this.getSVGData() }, Vara.prototype.createNode = function (t, e) { for (var s in t = document.createElementNS("http://www.w3.org/2000/svg", t), e) t.setAttributeNS(null, s.replace(/[A-Z]/g, function (t, e, s, i) { return "-" + t.toLowerCase() }), e[s]); return t }, Vara.prototype.getSVGData = function () { var t = this, e = new XMLHttpRequest; e.open("GET", this.fontSource, !0), e.onreadystatechange = function () { 4 == e.readyState && 200 == e.status && (t.contents = JSON.parse(e.responseText), t.characters = JSON.parse(e.responseText).c, t.preCreate(), t.createText()) }, e.send(null) }, Vara.prototype.preCreate = function () { !function () { if ("function" == typeof NodeList.prototype.forEach) return !1; NodeList.prototype.forEach = Array.prototype.forEach }(), this.questionMark = null == this.characters[63] ? { paths: [{ w: 8.643798828125, h: 14.231731414794922, my: 22.666500004827977, mx: 0, pw: 28.2464542388916, d: "m 0,0 c -2,-6.01,5,-8.64,8,-3.98,2,4.09,-7,8.57,-7,11.85" }, { w: 1.103759765625, h: 1.549820899963379, my: 8.881500004827977, mx: 1, pw: 4.466640472412109, d: "m 0,0 a 0.7592,0.7357,0,0,1,0,0.735,0.7592,0.7357,0,0,1,-1,-0.735,0.7592,0.7357,0,0,1,1,-0.738,0.7592,0.7357,0,0,1,0,0.738 z" }], w: 8.643798828125 } : this.characters[63], this.space = { paths: [{ d: "M0,0 l" + this.contents.p.space + " 0", mx: 0, my: 0, w: this.contents.p.space, h: 0 }], w: this.contents.p.space }; for (var t = this.analyseWidth(), e = 0; e < this.texts.length; e++) { for (var s = [], i = ("string" == typeof this.texts[e] ? { text: this.texts[e] } : this.texts[e]).text, r = 0; r < i.length; r++) { var n = i[r]; if (t.breakPoints[e][r].length > 0) for (var a, h = t.breakPoints[e][r].length, o = 0; o <= h; o++) { var l = t.breakPoints[e][r][o]; t.breakPoints[e][r][h - 1] != n.length && t.breakPoints[e][r].push(n.length); var c = null == t.breakPoints[e][r][o - 1] ? 0 : t.breakPoints[e][r][o - 1]; a = n.slice(c, l).replace(/^\s+/g, ""), s.push(a) } else s.push(i[r]) } this.texts[e].text = s } }, Vara.prototype.createText = function () { var t, e = this, s = this.svg, i = 0, r = 0, n = null == this.properties.lineHeight ? this.contents.p.lh : this.properties.lineHeight; this.properties.autoAnimation = null == this.properties.autoAnimation || this.properties.autoAnimation; for (var a = 0, h = !0, o = 0; o < this.texts.length; o++) { var l = [], c = 0; t = this.texts[o].fontSize; var p = this.texts[o].strokeWidth, u = null == this.texts[o].color ? null == this.properties.color ? "black" : this.properties.color : this.texts[o].color, d = null == this.texts[o].duration ? null == this.properties.duration ? 2e3 : this.properties.duration : this.texts[o].duration; this.texts[o].duration = d; var x = null == this.texts[o].id ? o : this.texts[o].id; this.texts[o].delay = null == this.texts[o].delay ? 0 : this.texts[o].delay, this.prevDuration += this.texts[o].delay, null == this.texts[o].fromCurrentPosition && (this.texts[o].fromCurrentPosition = { x: !0, y: !0 }), h = null == this.texts[o].y || !(null != this.texts[o].fromCurrentPosition.y && !this.texts[o].fromCurrentPosition.y); var f = u, g = null == this.texts[o].textAlign ? this.properties.textAlign : this.texts[o].textAlign; n = null == this.texts[o].lineHeight ? n : this.texts[o].lineHeight / t; var y = this.createNode("g", { class: "outer", transform: "translate(0,0)", "data-text": this.texts[o].text }); s.appendChild(y), r = a; for (var m = 0, v = 0; v < this.texts[o].text.length; v++) { var w = 0, C = this.createNode("g"); y.appendChild(C); for (var S = 0, k = 0, B = 0; B < this.texts[o].text[v].length; B++) { var b = this.texts[o].text[v][B], A = this.createNode("g"); C.appendChild(A); i = 0; var P = null != this.characters[b.charCodeAt(0)] || " " == b ? " " == b ? this.space.paths : this.characters[b.charCodeAt(0)].paths : this.questionMark.paths; u = " " == b ? "transparent" : f, P.forEach(function (t, s) { var i = e.createNode("path", { d: t.d, "stroke-width": p, stroke: u, fill: "none", "stroke-linecap": e.contents.p.slc, "stroke-linejoin": e.contents.p.slj }); A.appendChild(i), i.setAttribute("transform", "translate(" + t.mx + "," + -t.my + ")"), S = S > t.my - i.getBBox().y ? S : t.my - i.getBBox().y, 0 == s && (k = S), i.style.opacity = 0, i.style.strokeDasharray = i.getTotalLength() + " " + (i.getTotalLength() + 2), i.style.strokeDashoffset = i.getTotalLength() + 1 }), l.push(A); i = A.getBBox().x * t; A.getBBox().width < this.texts[o].minWidth && (i -= (this.texts[o].minWidth - A.getBBox().width) / 2), A.setAttribute("transform", "translate(" + (w - i + this.texts[o].letterSpacing) + ",0)  scale(" + t + ")"), w += A.getBBox().width * t + this.texts[o].letterSpacing, A.getBBox().width < this.texts[o].minWidth && (w += this.texts[o].minWidth - A.getBBox().width) } var V = C.getBBox(); C.setAttribute("transform", "translate(" + p * t + "," + (-V.y + p * t) + ")"); var W = 0; "center" == g ? W = (this.svg.getBoundingClientRect().width - V.width) / 2 : "right" == g && (W = this.svg.getBoundingClientRect().width - V.width), this.setPosition(C, { x: W, y: c + this.contents.p.tf * t - S }), c += n * t, m += this.contents.p.tf * t + (this.contents.p.tf * t - k) } null != this.texts[o].y && 1 != this.texts[o].fromCurrentPosition.y || this.setPosition(y, { y: r }), null != this.texts[o].fromCurrentPosition && this.texts[o].fromCurrentPosition.y && (a += null == this.texts[o].y ? 0 : this.texts[o].y), this.setPosition(y, { x: this.texts[o].x, y: this.texts[o].y }, this.texts[o].fromCurrentPosition), h && (a += m), null != this.drawnCharacters[x] && (x = o), this.drawnCharacters[x] = { characters: l, queued: this.texts[o].queued, container: y, index: o }, (null == this.texts[o].autoAnimation || this.texts[o].autoAnimation) && this.properties.autoAnimation && (e.draw(x, d), (null == this.texts[o].queued || this.texts[o].queued) && (e.prevDuration += d)) } this.completed = !0, this.svg.setAttribute("height", this.svg.getBBox().height + this.svg.getBBox().y + 10), this.readyF && this.readyF() }, Vara.prototype.playAll = function () { this.prevDuration = 0; for (var t = 0; t < this.texts.length; t++) { var e = this.texts[t].duration, s = null == this.texts[t].id ? t : this.texts[t].id; this.prevDuration += this.texts[t].delay, this.draw(s, e), (null == this.texts[t].queued || this.texts[t].queued) && (this.prevDuration += e) } }, Vara.prototype.draw = function (t, e) { var s = this; if (null == this.drawnCharacters[t]) return console.warn("ID:`" + t + "` not found. Animation skipped"), void console.trace(); var i = void 0 === e ? this.texts[this.drawnCharacters[t].index].duration : e, r = this.getSectionPathLength(t), n = 0, a = null == this.drawnCharacters[t].queued || this.drawnCharacters[t].queued ? this.prevDuration : 1; setTimeout(function () { s.drawnCharacters[t].characters.forEach(function (t) { t.querySelectorAll("path").forEach(function (t) { var e = parseFloat(t.style.strokeDashoffset) / r * i; t.style.opacity = 1, s.animate(t, e, n, 0), n += e }) }), setTimeout(function () { s.animationEndF && s.animationEndF(t, s.drawnCharacters[t]) }, n) }, a) }, Vara.prototype.get = function (t) { return null == this.drawnCharacters[t] ? (console.warn("ID:`" + t + "` not found."), console.trace(), !1) : this.drawnCharacters[t] }, Vara.prototype.animate = function (t, e, s, i) { var r = this; i = Number(i) || 0, setTimeout(function () { var s = (new Date).getTime(), n = parseFloat(t.style.strokeDashoffset), a = setInterval(function () { var r = Math.min(1, ((new Date).getTime() - s) / e); t.style.strokeDashoffset = n + r * (i - n), 1 == r && clearInterval(a) }, r.frameRate) }, s) }, Vara.prototype.getSectionPathLength = function (t) { var e = this; return this.totalPathLength = 0, this.drawnCharacters[t].characters.forEach(function (t) { t.querySelectorAll("path").forEach(function (t) { e.totalPathLength += t.getTotalLength() }) }), this.totalPathLength }, Vara.prototype.analyseWidth = function () { var t = 0, e = this.svg.getBoundingClientRect().width, s = [], i = null == this.characters[97] ? Object.keys(this.characters)[Math.round(Math.random() * this.characters.length)] : "97", r = document.createElement("span"); this.element.appendChild(r), r.style.opacity = 0, r.style.position = "absolute", r.innerHTML = String.fromCharCode(i); var n = document.createElement("span"); this.element.appendChild(n), n.style.opacity = 0, n.style.position = "absolute", n.innerHTML = " . "; for (var a = 0; a < this.texts.length; a++) { var h, o = this.texts[a]; h = "string" == typeof o.text ? [o.text] : o.text, this.texts[a].text = h, this.texts[a].letterSpacing = null == this.texts[a].letterSpacing ? null == this.properties.letterSpacing ? 0 : this.properties.letterSpacing : this.texts[a].letterSpacing, this.texts[a].strokeWidth = null == this.texts[a].strokeWidth ? null == this.properties.strokeWidth ? this.contents.p.bsw : this.properties.strokeWidth : this.texts[a].strokeWidth; var l = null == this.texts[a].breakWord ? null != this.properties.breakWord && this.properties.breakWord : this.texts[a].breakWord, c = null == o.fontSize ? null == this.properties.fontSize ? this.fontSize : this.properties.fontSize : o.fontSize; r.style.fontSize = c + "px", n.style.fontSize = c + "px"; var p = r.getBoundingClientRect().width / this.characters[i].w; this.texts[a].minWidth = n.getBoundingClientRect().width; var u, d = null == this.texts[a].width ? e : this.texts[a].width, x = [], f = null == this.texts[a].x ? 0 : this.texts[a].x; this.trueFontSize = c, this.texts[a].fontSize = p; for (var g = 0; g < h.length; g++) { for (var y = f * p, m = [], v = h[g], w = 0, C = 0; C < v.length; C++)if (null != this.characters[v[C].charCodeAt(0)] ? ((u = this.characters[v[C].charCodeAt(0)].w * p) < this.texts[a].minWidth && (u += p * (this.texts[a].minWidth - this.characters[v[C].charCodeAt(0)].w) / 2), u += this.texts[a].letterSpacing) : " " == v[C] ? (u = this.space.w * p, w = y) : u = this.questionMark.w * p + this.texts[a].letterSpacing, y + (u += this.texts[a].strokeWidth * p) >= d) { 0 == w && (l = !0); var S = C; " " == v[C] || l || (S = v.slice(0, S + 1).search(/\S+$/)), m.push(S), y = f * p + y - w } else t += u, y += u; x.push(m) } s.push(x) } return r.parentNode.removeChild(r), n.parentNode.removeChild(n), { width: t, breakPoints: s } }, Vara.prototype.setPosition = function (t, e, s) { (s = null == s ? { x: !1, y: !1 } : s).x = null != s.x && s.x, s.y = null != s.y && s.y; var i = t.transform.baseVal.consolidate().matrix, r = i.e, n = i.f; null != e.x && (s.x ? r += e.x : r = e.x), null != e.y && (s.y ? n += e.y : n = e.y - t.getBBox().y); var a = this.svg.createSVGTransform(); a.setTranslate(r, n), t.transform.baseVal.replaceItem(a, 0) }, "undefined" != typeof module ? module.exports = Vara : window.Vara = Vara;